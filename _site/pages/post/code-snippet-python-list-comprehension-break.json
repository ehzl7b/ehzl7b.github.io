{"name":"code-snippet-python-list-comprehension-break","ver":"[0010,2402031941]","cat":"/code-snippet","pathname":"/post/code-snippet-python-list-comprehension-break","title":"Python 에서 List Comprehension 순회 중간에 break 하기","description":"List comprehension 문법으로 순회 도중, 특정한 조건일 때 순회 break 를 거는 방법","updated":"2021-09-07","content":"<h1 class=\"page-title\">Python 에서 List Comprehension 순회 중간에 break 하기</h1><div class=\"page-meta\"><div class=\"page-description\">List comprehension 문법으로 순회 도중, 특정한 조건일 때 순회 break 를 거는 방법</div><div class=\"page-updated\">Last updated: 2021-09-07</div></div><div class=\"page-main\"><h2>Comprehension 표현식과 break</h2>\n<p>Comprehension 표현식은, 어떤 iterable 개체를 처음부터 끝까지 순회하면서 이런저런 처리를 손쉽게 할 수 있도록 해주는 Python 의 강력한 기능이다.</p>\n<p>어떤 특정한 상황에서는 순회 중간에 끊어버리고 싶을 때가 있는데, for 나 while 반복문에서 사용하는 break 를 사용하면 에러가 발생한다. break 는 Comprehension 표현식이 요구하는 Expression 이 아닌 Statement 이기 때문이다.</p>\n<ul>\n<li>python</li>\n</ul>\n<pre><code class=\"language-python\"><div class=\"codeline \">arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-built_in\">print</span>([x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> arr <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">4</span>])             <span class=\"hljs-comment\"># [1, 2, 3, 3, 2, 1]</span></div><div class=\"codeline \"><span class=\"hljs-built_in\">print</span>([x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> arr <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">break</span>])    <span class=\"hljs-comment\"># 에러 발생</span></div></code></pre>\n<p><code>x &lt; 4</code> 가 더 이상 True 가 아닐 때 바로 순회를 종료해버리고 싶다면, itertools 모듈의 takeWhile 함수를 사용하면 된다.</p>\n<ul>\n<li>python</li>\n</ul>\n<pre><code class=\"language-python\"><div class=\"codeline \"><span class=\"hljs-keyword\">from</span> itertools <span class=\"hljs-keyword\">import</span> takewhile</div><div class=\"codeline \"> </div><div class=\"codeline \">arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">list</span>(takewhile(<span class=\"hljs-keyword\">lambda</span> x: x &lt; <span class=\"hljs-number\">4</span>, arr)))    <span class=\"hljs-comment\"># [1, 2, 3]</span></div></code></pre>\n<h2>Comprehension 순회 중간에 순회 대상의 모든 요소를 없애기</h2>\n<p>하지만 어떻게든 List Comprehension 형태를 유지하면서 순회 중간에 종료를 하고 싶다하면, 아예 방법이 없는 것은 아니다. 먼저 순회 중간에 순회 대상을 없애버리는 방법을 생각할 수 있다.</p>\n<ul>\n<li>python</li>\n</ul>\n<pre><code class=\"language-python\"><div class=\"codeline \">arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-built_in\">print</span>([x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> arr <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">or</span> arr.clear()])    <span class=\"hljs-comment\"># [1, 2, 3]</span></div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-built_in\">print</span>(arr)    <span class=\"hljs-comment\"># [] &lt;-- 순회하던 리스트가 빈 리스트가 됨</span></div></code></pre>\n<p><code>x &lt; 4</code> 가 더 이상 True 가 아닐 때, <code>arr.clear()</code> 구문이 실행된다. 함수호출은 Expression 이기 때문에 사용할 수가 있고, clear 함수는 리스트 모든 요소를 없애버린다. 없어졌기 때문에 더 이상 순회를 못하는 점을 이용한 것이다.</p>\n<p>참고로 이 방식은 튜플, 딕셔너리, set 자료형에는 적용할 수 없다. 에러가 발생한다.</p>\n<h2>순회 대상을 제너레이터로 감싸기</h2>\n<p>순회 대상은 그대로 두고, 이를 제너레이터로 감싼 뒤, 특정 상황에서 제너레이터 동작을 멈추도록 하는 방식을 생각할 수 있다.</p>\n<ul>\n<li>python</li>\n</ul>\n<pre><code class=\"language-python\"><div class=\"codeline \">arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]</div><div class=\"codeline \">g = (x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> arr)    <span class=\"hljs-comment\"># 괄호로 Comprehension 표현식을 감싸면 Generator 를 리턴한다.</span></div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-built_in\">print</span>([x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> g <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">or</span> g.close()])    <span class=\"hljs-comment\"># [1, 2, 3]</span></div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-built_in\">print</span>(arr)    <span class=\"hljs-comment\"># [1, 2, 3, 4, 5, 4, 3, 2, 1]</span></div></code></pre>\n<p>arr 리스트를 제너레이터로 감싼 뒤, g 에 대입하였다. (물론 직접 def 구문으로 제너레이터를 생성해도 된다.)</p>\n<p><code>x &lt; 4</code> 가 더 이상 True 가 아닐 때, <code>g.close()</code> 구문이 실행된다. close 함수는 GeneratorExit 예외를 발생시키며 제너레이터 동작을 중단시킨다. 순회 대상 자체를 변형하는 것이 아니기 때문에, Comprehension 순회 도중 끊어도 원래의 arr 리스트는 유지가 된다.</p>\n<p>그리고 제너레이터로 감싸기만 하면 되기 때문에, 튜플, 딕셔너리, set 자료형에도 얼마든지 적용할 수 있다.</p>\n</div>"}
