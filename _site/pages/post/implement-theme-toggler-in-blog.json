{"name":"implement-theme-toggler-in-blog","ver":"[0030,2404151505]","cat":"/dev","pathname":"/post/implement-theme-toggler-in-blog","title":"블로그 다크 테마 및 토글 스위치 구현하기","description":"시스템 설정에 맞춰, Light 또는 Dark 테마를 자동으로 선택하고, 선택한 테마에 따라 쉽게 CSS 변환하는 방법","updated":"2024-04-15","content":"<h1 class=\"page-title\">블로그 다크 테마 및 토글 스위치 구현하기</h1><div class=\"page-meta\"><div class=\"page-description\">시스템 설정에 맞춰, Light 또는 Dark 테마를 자동으로 선택하고, 선택한 테마에 따라 쉽게 CSS 변환하는 방법</div><div class=\"page-updated\">Last updated: 2024-04-15</div></div><div class=\"page-main\"><h2>블로그에 테마 적용</h2>\n<p>쉽게 말해 Light 또는 Dark 테마를 아래 규칙에 따라 적용되도록 만드는 방법이다.</p>\n<ul>\n<li>note</li>\n</ul>\n<blockquote>\n<ul>\n<li>방문자 첫 블로그 접속 시, 시스템 설정에 따라 Light 또는 Dark 테마를 보여줌</li>\n<li>방문자의 선택에 따라 테마 변경 가능</li>\n<li>다른 페이지 이동 또는 다른 웹사이트를 들렀다가 재방문 했을 때 최근 선택했던 테마로 다시 보여줌</li>\n</ul>\n</blockquote>\n<p>고려해야 할 것은 아래와 같았다.</p>\n<ul>\n<li>note</li>\n</ul>\n<blockquote>\n<ul>\n<li>Light 및 Dark 테마에 필요한 CSS</li>\n<li>테마 전환 스위치를 구현한 HTML</li>\n<li>시스템 테마 확인, 스위치 클릭 시 테마 전환, 선택한 테마를 기억하는 모듈을 구현한 Javascript</li>\n</ul>\n</blockquote>\n<h2>테마별 CSS</h2>\n<p>HTML 최상위 태그에 적용할 테마를 기록하고, CSS변수로 해당 테마에 따라 각각 테마가 적용되도록 하는 것이 간편했다.</p>\n<ul>\n<li>index.html</li>\n</ul>\n<pre><code class=\"language-html\"><div class=\"codeline \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">data-theme</span>=<span class=\"hljs-string\">&quot;light&quot;</span>&gt;</span></div><div class=\"codeline \">  <span class=\"hljs-comment\">&lt;!-- 생략 --&gt;</span></div><div class=\"codeline \">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>블로그<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></div><div class=\"codeline \">  <span class=\"hljs-comment\">&lt;!-- 생략 --&gt;</span></div><div class=\"codeline \"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></div></code></pre>\n<ul>\n<li>main.scss</li>\n</ul>\n<pre><code class=\"language-scss\"><div class=\"codeline \"><span class=\"hljs-selector-pseudo\">:root</span> {</div><div class=\"codeline \">  <span class=\"hljs-attr\">--fg</span>: <span class=\"hljs-number\">#fff</span>;</div><div class=\"codeline \">  &amp;<span class=\"hljs-selector-attr\">[data-theme=<span class=\"hljs-string\">&quot;dark&quot;</span>]</span> {</div><div class=\"codeline \">    <span class=\"hljs-attr\">--fg</span>: <span class=\"hljs-number\">#000</span>;</div><div class=\"codeline \">  }</div><div class=\"codeline \">}</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-selector-tag\">h1</span> {</div><div class=\"codeline \">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--fg);</div><div class=\"codeline \">}</div></code></pre>\n<p>태그 전경색 등을 CSS변수로 설정하고, CSS변수를 <code>:root</code> 안에서 테마에 따라 설정하는 방식이다. 나중에 테마를 변경하거나 추가할 때, <code>:root</code> 내용만 건들면 되므로 편할 것 같다.</p>\n<h2>전환스위치 HTML</h2>\n<ul>\n<li>index.html</li>\n</ul>\n<pre><code class=\"language-html\"><div class=\"codeline \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;theme-btn&quot;</span>&gt;</span></div><div class=\"codeline \">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>LIGHT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></div><div class=\"codeline \">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></div><div class=\"codeline \">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span></div><div class=\"codeline \">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;theme-switch&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></div><div class=\"codeline \">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></div><div class=\"codeline \">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>DARK<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></div><div class=\"codeline \"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></div></code></pre>\n<p>스위치 역할은 체크박스 타입의 input 태그가 담당한다.</p>\n<ul>\n<li>main.scss</li>\n</ul>\n<pre><code class=\"language-scss\"><div class=\"codeline \"><span class=\"hljs-selector-tag\">label</span> {</div><div class=\"codeline \">  <span class=\"hljs-comment\">// 생략</span></div><div class=\"codeline \">  <span class=\"hljs-selector-tag\">input</span> {</div><div class=\"codeline \">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;</div><div class=\"codeline \">    &amp;<span class=\"hljs-selector-pseudo\">:checked</span>+<span class=\"hljs-selector-tag\">div</span> {</div><div class=\"codeline \">      <span class=\"hljs-comment\">// 스위치 클릭되었을 때(checked)의 속성</span></div><div class=\"codeline \">    }</div><div class=\"codeline \">  }</div><div class=\"codeline \">  <span class=\"hljs-selector-class\">.theme-switch</span> {</div><div class=\"codeline \">    <span class=\"hljs-comment\">// 스위치 클릭되지 않았을 때(unchecked)의 속성</span></div><div class=\"codeline \">    <span class=\"hljs-comment\">// 스위치 클릭여부에 관계없는 공통 속성</span></div><div class=\"codeline \">  }</div><div class=\"codeline \">  <span class=\"hljs-comment\">// 생략</span></div><div class=\"codeline \">}</div></code></pre>\n<p>CSS로 input 태그를 안보이게 설정하고, input 태그가 클릭(즉, 체크박스가 checked) 되었을 때와 아닐때를 설정해주면 된다.</p>\n<p>개인적으로는 좌우 형태의 전환 스위치 모양으로 표현하고, <code>.theme-switch</code>의 left 속성을 달리하는 식으로 구현하고는 했다.</p>\n<h2>테마 관련 모둘 Javascript</h2>\n<p>먼저 주요 변수와 테마를 전환하는 set_theme 함수를 구현한다.</p>\n<ul>\n<li>index.html</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \"><span class=\"hljs-comment\">// index.html 의 script 태그 안에 작성</span></div><div class=\"codeline \"><span class=\"hljs-keyword\">const</span> $root = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;html&#x27;</span>);</div><div class=\"codeline \"><span class=\"hljs-keyword\">const</span> $theme_btn_input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;.theme-btn input&#x27;</span>);</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">set_theme</span>(<span class=\"hljs-params\">theme</span>) {</div><div class=\"codeline \">  $root.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">theme</span> = theme</div><div class=\"codeline \">  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">sessionStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>, theme)</div><div class=\"codeline \">}</div></code></pre>\n<p>방문자가 선택한 테마를 기억하기 위해 sessionStorage 를 사용했다. 이에 대해선 <a href=\"https://developer.mozilla.org/ko/docs/Web/API/Window/sessionStorage\">MDN 문서</a>를 참고하자. 사실 localStorage 도 사용할 수 있는데 이에 대해서도 <a href=\"https://developer.mozilla.org/ko/docs/Web/API/Window/localStorage\">MDN 문서</a>를 참고하자.</p>\n<p>다음으로 사이트가 로딩될 때의 코드가 필요하다.</p>\n<ul>\n<li>index.html</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \"><span class=\"hljs-comment\">// 위 코드에 이어서 작성</span></div><div class=\"codeline \"><span class=\"hljs-keyword\">let</span> cur_theme = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">sessionStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>) || (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">matchMedia</span> &amp;&amp; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class=\"hljs-property\">matches</span>  ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>);</div><div class=\"codeline \"><span class=\"hljs-keyword\">if</span> (cur_theme === <span class=\"hljs-string\">&#x27;dark&#x27;</span>) {</div><div class=\"codeline \">  $theme_btn_input.<span class=\"hljs-property\">checked</span> = <span class=\"hljs-literal\">true</span>;</div><div class=\"codeline \">  <span class=\"hljs-title function_\">set_theme</span>(<span class=\"hljs-string\">&#x27;dark&#x27;</span>);</div><div class=\"codeline \">}</div><div class=\"codeline \"> </div><div class=\"codeline \">$theme_btn_input.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {</div><div class=\"codeline \">  <span class=\"hljs-title function_\">set_theme</span>((e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">checked</span>) ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>);</div><div class=\"codeline \">}</div></code></pre>\n<p>먼저 방문자가 선택한 테마가 있는지 확인하고, 없다면 시스템 테마를 <code>cur_theme</code> 변수로 가져온다. 가져온 테마가 <code>dark</code> 라면 Dark 테마로 전환해준다.</p>\n<p>마지막은 스위치 클릭에 대한 이벤트 처리다.</p>\n</div>"}
