{"name":"implement-spa-in-blog","ver":"[0020,2404110813]","cat":"/dev","pathname":"/post/implement-spa-in-blog","title":"블로그 SPA(Single Page Application) 구현하기","description":"SPA 구현을 위해 고려해야 할 사항들과 실제 구현해본 코드 예시","updated":"2024-04-11","content":"<h1 class=\"page-title\">블로그 SPA(Single Page Application) 구현하기</h1><div class=\"page-meta\"><div class=\"page-description\">SPA 구현을 위해 고려해야 할 사항들과 실제 구현해본 코드 예시</div><div class=\"page-updated\">Last updated: 2024-04-11</div></div><div class=\"page-main\"><h2>SPA 구현</h2>\n<p>SPA에 대한 개념은 <a href=\"https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80_%ED%8E%98%EC%9D%B4%EC%A7%80_%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\">위키피디아</a> 문서를 살펴보면 된다.</p>\n<p>블로그를 SPA로 만들려면 아래 이벤트에 대한 페이지 로딩 처리가 필요하다.</p>\n<ul>\n<li>note</li>\n</ul>\n<blockquote>\n<ul>\n<li>주소를 직접 입력했을 때</li>\n<li>브라우저 전/후 이동 버튼을 클릭했을 때</li>\n<li>링크 태그를 클릭했을 때</li>\n</ul>\n</blockquote>\n<p>위 이벤트 구현 위한 코드를 index.html 의 script 태그 안에 삽입하면 된다.</p>\n<p>다만, 본 블로그가 심겨진 Github Pages의 작동방식의 특성상(입력주소.html 파일을 찾고 없다면, 404.html 파일을 로드) index.html과 동일한 내용으로 404.html 파일도 만들어야 했다.</p>\n<h2>Javascript 코드</h2>\n<p>전체적으로 페이지를 로딩하는 fetch_content 함수를 만들고, 위에서 언급한 세가지 이벤트가 발생할 때마다 fetch_content 를 호출하도록 했다.</p>\n<ul>\n<li>index.html</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetch_content</span>(<span class=\"hljs-params\"></span>) {</div><div class=\"codeline \">  <span class=\"hljs-keyword\">const</span> cur_pathname = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">pathname</span>    <span class=\"hljs-comment\">// 현재 접속한 주소 정보를 로드</span></div><div class=\"codeline \">  <span class=\"hljs-keyword\">const</span> tar_pathname = <span class=\"hljs-string\">&#x27;&lt;json_file_address&gt;&#x27;</span>       <span class=\"hljs-comment\">// cur_pathname 에 매칭되는 json 파일 주소</span></div><div class=\"codeline \">  <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-string\">&#x27;&#x27;</span></div><div class=\"codeline \">  <span class=\"hljs-keyword\">try</span> {</div><div class=\"codeline \">    response = <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(tar_pathname)).<span class=\"hljs-title function_\">json</span>()         <span class=\"hljs-comment\">// 매칭 json 파일 로드</span></div><div class=\"codeline \">  } <span class=\"hljs-keyword\">catch</span> (err) {</div><div class=\"codeline \">    response = <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;/pages/404.json&#x27;</span>)).<span class=\"hljs-title function_\">json</span>()    <span class=\"hljs-comment\">// 매칭 json 파일이 없다면 404.json 로드</span></div><div class=\"codeline \">  }</div><div class=\"codeline \">  some_element.<span class=\"hljs-property\">innerHTML</span> = response.<span class=\"hljs-property\">content</span>        <span class=\"hljs-comment\">// 특정 엘리먼트(some_element) 안에 json 내용 삽입 </span></div><div class=\"codeline \">  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-string\">&#x27;&lt;title&gt;태그 내용&#x27;</span>              <span class=\"hljs-comment\">// 로드한 json 파일에 걸맞게 &lt;title&gt; 태그 내용 변경</span></div><div class=\"codeline \">}</div></code></pre>\n<p>아래는 주소를 직접 입력했을 때의 이벤트 처리 코드다.</p>\n<ul>\n<li>index.html</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \"><span class=\"hljs-title function_\">fetch_content</span>()</div></code></pre>\n<p>주소를 직접 입력하면, 서버에 의해 index.html(또는 404.html)이 처음부터 로드되므로, fetch_content 함수를 직접 실행시키면 된다.</p>\n<p>아래는 브라우저 전/후 이동 버튼 클릭했을 때의 이벤트 처리 코드다.</p>\n<ul>\n<li>index.html</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">onpopstate</span> = <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {</div><div class=\"codeline \">  <span class=\"hljs-title function_\">fetch_content</span>()</div><div class=\"codeline \">}</div></code></pre>\n<p>popstate 이벤트에 대해서는 <a href=\"https://developer.mozilla.org/ko/docs/Web/API/Window/popstate_event\">MDN</a> 문서를 살펴보자.</p>\n<p>아래는 링크 태그를 클릭했을 때의 이벤트 처리 코드다.</p>\n<ul>\n<li>index.html</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">async</span> e =&gt; {</div><div class=\"codeline \">  <span class=\"hljs-comment\">// a 태그를 클릭이면서, 링크 주소가 본 블로그에 속한 주소이고, 주소가 # 이나 확장자가 붙은 경우(파일인 경우)가 아닐 때 SPA 작동</span></div><div class=\"codeline \">  <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">matches</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>)  &amp;&amp; e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">origin</span>) &amp;&amp; !e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;href&#x27;</span>).<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/[.#]/</span>)) {</div><div class=\"codeline \">    e.<span class=\"hljs-title function_\">preventDefault</span>()</div><div class=\"codeline \"> </div><div class=\"codeline \">    <span class=\"hljs-comment\">// 현재의 주소와 동일한 주소가 아닐 때 SPA 작동</span></div><div class=\"codeline \">    <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span> !== <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">href</span>) {</div><div class=\"codeline \">      history.<span class=\"hljs-title function_\">pushState</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span>)</div><div class=\"codeline \">      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch_content</span>()</div><div class=\"codeline \">    }</div><div class=\"codeline \">  }</div><div class=\"codeline \">}</div></code></pre>\n<p>이유는 잘 모르겠으나, a 태그에 대한 이벤트처리를 작성하면 작동하지 않았다. a 태그가 속한 부모 태그에 대한 이벤트 처리가 필요하며, 블로그 특성상 여기저기 a 태그가 널려있으므로 최상위에 속한 body 태그에 이벤트 처리 구문을 작성했다.</p>\n<p>history 인스턴스의 pushState 메서드에 대해선 <a href=\"https://developer.mozilla.org/ko/docs/Web/API/History/pushState\">MDN</a> 문서를 참고하자.</p>\n</div>"}
