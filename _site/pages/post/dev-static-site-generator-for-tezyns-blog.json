{"name":"dev-static-site-generator-for-tezyns-blog","ver":"[0080,2402071133]","cat":"/dev","pathname":"/post/dev-static-site-generator-for-tezyns-blog","title":"Tezyns 블로그 빌더 구축","description":"Node.JS 사용하여 SPA 형태의 Tezyns 블로그를 구축해주는 빌더의 주요 내용 소개","updated":"2024-02-06","content":"<h1 class=\"page-title\">Tezyns 블로그 빌더 구축</h1><div class=\"page-meta\"><div class=\"page-description\">Node.JS 사용하여 SPA 형태의 Tezyns 블로그를 구축해주는 빌더의 주요 내용 소개</div><div class=\"page-updated\">Last updated: 2024-02-06</div></div><div class=\"page-main\"><h2>블로그 빌더 콘셉트</h2>\n<p>그동안 깃허브 페이지에서 블로그를 운영하면서, 가장 유명한 SSG 툴인 <a href=\"https://jekyllrb-ko.github.io/\">Jekyll</a> 을 사용해왔는데, 개인적인 스터디도 할 겸해서 직접 블로그 빌더를 구축해보기로 하였다.</p>\n<p>어떤 방식으로 빌드가 되도록 할까 하다가 아래와 같이 정했다.</p>\n<ul>\n<li>note</li>\n</ul>\n<blockquote>\n<ul>\n<li>Historical SPA (Single Page Application) 방식으로 작동 (메뉴 또는 포스팅을 클릭거나 주소를 입력하면 json 형식의 콘텐츠를 로드)</li>\n<li>포스팅은 markdown 으로 작성하되, Github 에 올리면 자동으로 빌드 (markdown -&gt; html -&gt; json 으로 저장) 되도록 함</li>\n<li>markdown 파일을 <code>[ver]pathname.md</code> 형태로 저장하고, <code>ver</code> 가 변경된 파일만 빌드, <code>ver</code> 에 따라 포스팅 정렬, <code>pathname</code> 은 포스팅 주소 (permalink) 가 되도록 함</li>\n</ul>\n</blockquote>\n<p>약 두달간의 삽질 끝에 허접하게나마 만들 수 있었다. 빌드에 필요한 모든 내용을 <code>build.js</code> 이라는 단일 파일에 담았다.</p>\n<p>모든 과정을 기록하기보다는 중요한 것만 추려서 아래부터 기록하였다. 실제 결과물을 모두 보고 싶다면 <a href=\"https://github.com/tezyns/tezyns.github.io/tree/tezyns-blog-builder-v1.0.2\">깃허브 레포지토리</a>를 직접 탐색해보기 바란다.</p>\n<h2>markdown-it 커스터마이징</h2>\n<p>markdown 파싱위해 <a href=\"https://github.com/markdown-it/markdown-it#readme\">markdown-it</a> 을, 그리고 코딩 하이라이트를 위해 <a href=\"https://highlightjs.org/\">highlight.js</a> 외부 모듈을 사용하였다.</p>\n<p>특히, 라인 하이라이팅을 위해 아래와 같이 커스터마이징을 했다.</p>\n<ul>\n<li>./build.js</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \"><span class=\"hljs-comment\">// ...</span></div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-keyword\">import</span> hljs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highlight.js&#x27;</span></div><div class=\"codeline \"><span class=\"hljs-keyword\">import</span> markdownIt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;markdown-it&#x27;</span></div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-comment\">// ...</span></div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-keyword\">const</span> parse_md = <span class=\"hljs-title function_\">markdownIt</span>({</div><div class=\"codeline \">  <span class=\"hljs-attr\">html</span>: <span class=\"hljs-literal\">true</span>,</div><div class=\"codeline \">  <span class=\"hljs-attr\">xhtmlOut</span>: <span class=\"hljs-literal\">true</span>,</div><div class=\"codeline \">  <span class=\"hljs-title function_\">highlight</span>(<span class=\"hljs-params\">code, lang</span>) {</div><div class=\"codeline \">    <span class=\"hljs-keyword\">const</span> language = hljs.<span class=\"hljs-title function_\">getLanguage</span>(lang) ? lang : <span class=\"hljs-string\">&#x27;plaintext&#x27;</span></div><div class=\"codeline \"> </div><div class=\"codeline \">    <span class=\"hljs-keyword\">let</span> lines = code.<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>)</div><div class=\"codeline \">    <span class=\"hljs-keyword\">let</span> tar_line = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()</div><div class=\"codeline \">    <span class=\"hljs-keyword\">let</span> code_modified = lines.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, i</span>) =&gt;</span> {</div><div class=\"codeline \">      <span class=\"hljs-keyword\">if</span> (x.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&#x27;/-&#x27;</span>) || x.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&#x27;/+&#x27;</span>) || x.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">&#x27;/=&#x27;</span>)) {</div><div class=\"codeline \">        tar_line.<span class=\"hljs-title function_\">set</span>(i, x[<span class=\"hljs-number\">1</span>])</div><div class=\"codeline \">        x = x.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">2</span>)</div><div class=\"codeline \">      }</div><div class=\"codeline \">      <span class=\"hljs-keyword\">return</span> x</div><div class=\"codeline \">    }).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>)</div><div class=\"codeline \"> </div><div class=\"codeline \">    lines = hljs.<span class=\"hljs-title function_\">highlight</span>(code_modified, { language }).<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>)</div><div class=\"codeline \">    <span class=\"hljs-keyword\">return</span> lines.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, i</span>) =&gt;</span> {</div><div class=\"codeline \">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&lt;div class=&quot;codeline <span class=\"hljs-subst\">${tar_line.get(i) || <span class=\"hljs-string\">&#x27;&#x27;</span>}</span>&quot;&gt;<span class=\"hljs-subst\">${x || <span class=\"hljs-string\">&#x27; &#x27;</span>}</span>&lt;/div&gt;`</span></div><div class=\"codeline \">    }).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)</div><div class=\"codeline \">  },</div><div class=\"codeline \">})</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-comment\">// ...</span></div></code></pre>\n<p>markdown-it 설정을 보면, 하이라이팅이 필요한 구문을 줄 단위로 끊은 뒤, 줄 단위로 순회하면서 만일 <code>/-</code>, <code>/+</code>, <code>/=</code>로 시작하는 줄이 있다면 이를 따로 기록하고 해당 문자를 삭제해 둔다.</p>\n<p>그리고, highlight.js 로 하이라이팅 한 뒤, 다시 각 줄을 <code>&lt;div class=&quot;codeline ...&quot;&gt;&lt;/div&gt;</code> 구문으로 감싼다. 앞서서 따로 기록했던 문자가 속한 줄이라면 class 에 포함시고, css 통해서 라인 하이라이팅이 되도록 하면 된다.</p>\n<p>아래는 라인 하이라이팅이 적용된 예시다. <a href=\"https://leetcode.com/problems/two-sum/description/\">Leetcode 1번 문제</a> 풀이를 가져와서 표현해봤다.</p>\n<ul>\n<li>python</li>\n</ul>\n<pre><code class=\"language-python\"><div class=\"codeline \"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">twoSum</span>(<span class=\"hljs-params\">self, nums: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:</div><div class=\"codeline -\">  <span class=\"hljs-keyword\">for</span> i, x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums):</div><div class=\"codeline +\">  <span class=\"hljs-keyword\">for</span> i, x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums[:-<span class=\"hljs-number\">1</span>]):</div><div class=\"codeline -\">    <span class=\"hljs-keyword\">for</span> j, y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums):</div><div class=\"codeline +\">    <span class=\"hljs-keyword\">for</span> j, y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums[i+<span class=\"hljs-number\">1</span>:], i+<span class=\"hljs-number\">1</span>):</div><div class=\"codeline \">      <span class=\"hljs-keyword\">if</span> x+y == target:</div><div class=\"codeline =\">        <span class=\"hljs-keyword\">return</span> i, j</div></code></pre>\n<h2>SPA 구현 코드</h2>\n<p>Historical SPA 로 웹페이지가 동작하려면, 아래 기능들을 구현해야 한다.</p>\n<ul>\n<li>note</li>\n</ul>\n<blockquote>\n<ul>\n<li><code>&lt;a&gt;</code> 태그를 클릭했을 때, 링크 주소로 웹페이지를 연결하는 것이 아니라, 링크 주소와 관련된 json 파일 로드하여 화면에 띄움</li>\n<li>주소를 직접 입력했을 때, 링크 주소와 관련된 json 파일 로드하여 화면에 띄움</li>\n<li>웹페이지 앞, 뒤가기 버튼을 클릭했을 때, 주소가 바뀌면서 해당 주소와 관련된 json 파일을 로드하여 화면에 띄움</li>\n</ul>\n</blockquote>\n<p>템플릿 엔진으로 <a href=\"https://pugjs.org/api/getting-started.html\">pug</a> 를 사용하였는데, 그 안에 javascript 코드를 아래와 같이 작성했다.</p>\n<ul>\n<li>./_layouts/base.pug</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \"><span class=\"hljs-comment\">// ...</span></div><div class=\"codeline \"><span class=\"hljs-keyword\">const</span> $scroller = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#scroller&#x27;</span>)</div><div class=\"codeline \"><span class=\"hljs-keyword\">const</span> $main = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;main&#x27;</span>)</div><div class=\"codeline \"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetch_content</span>(<span class=\"hljs-params\"></span>) {</div><div class=\"codeline \">  <span class=\"hljs-keyword\">const</span> cur_pathname = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">pathname</span></div><div class=\"codeline \">  <span class=\"hljs-keyword\">const</span> tar_pathname = <span class=\"hljs-string\">&#x27;/pages/&#x27;</span> + cur_pathname.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>) + (cur_pathname === <span class=\"hljs-string\">&#x27;/&#x27;</span> ? <span class=\"hljs-string\">&#x27;index.json&#x27;</span> : <span class=\"hljs-string\">&#x27;.json&#x27;</span>)</div><div class=\"codeline \">  <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-string\">&#x27;&#x27;</span></div><div class=\"codeline \">  <span class=\"hljs-keyword\">try</span> {</div><div class=\"codeline \">    response = <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(tar_pathname)).<span class=\"hljs-title function_\">json</span>()</div><div class=\"codeline \">  } <span class=\"hljs-keyword\">catch</span> (err) {</div><div class=\"codeline \">    response = <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;/pages/404.json&#x27;</span>)).<span class=\"hljs-title function_\">json</span>()</div><div class=\"codeline \">  }</div><div class=\"codeline \">  $main.<span class=\"hljs-property\">innerHTML</span> = response.<span class=\"hljs-property\">content</span></div><div class=\"codeline \">  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> = response.<span class=\"hljs-property\">title</span> + <span class=\"hljs-string\">`::#{site.title}`</span></div><div class=\"codeline \">}</div><div class=\"codeline \"><span class=\"hljs-comment\">// 주소 직접 입력</span></div><div class=\"codeline \"><span class=\"hljs-title function_\">fetch_content</span>()</div><div class=\"codeline \"><span class=\"hljs-comment\">// &lt;a&gt; 태그 클릭</span></div><div class=\"codeline \"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">async</span> e =&gt; {</div><div class=\"codeline \">  <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">matches</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>) &amp;&amp; e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">origin</span>) &amp;&amp; !e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;href&#x27;</span>).<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/[.#]/</span>)) {</div><div class=\"codeline \">    e.<span class=\"hljs-title function_\">preventDefault</span>()</div><div class=\"codeline \">    <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span> !== <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">href</span>) {</div><div class=\"codeline \">      history.<span class=\"hljs-title function_\">pushState</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">href</span>)</div><div class=\"codeline \">      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch_content</span>()</div><div class=\"codeline \">      $scroller.<span class=\"hljs-title function_\">scrollTo</span>({ <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span> })</div><div class=\"codeline \">    }</div><div class=\"codeline \">  }</div><div class=\"codeline \">}</div><div class=\"codeline \"><span class=\"hljs-comment\">// 전/후 이동 버튼 클릭</span></div><div class=\"codeline \"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">onpopstate</span> = <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {</div><div class=\"codeline \">  <span class=\"hljs-title function_\">fetch_content</span>()</div><div class=\"codeline \">}</div></code></pre>\n<p>핵심적인 코드는, json 파일을 로드하는 <code>fetch_content</code> 함수다. 주소를 직접 입력했을 때, <code>&lt;a&gt;</code> 태그를 클릭했을 때, 전/후 이벤트 처리하는 <code>document.body.onclick</code> 함수다.</p>\n<p>클릭 이벤트 처리를 <code>&lt;a&gt;</code> 태그가 아닌, <code>&lt;body&gt;</code> 태그로 하면서 실제 타겟이 <code>&lt;a&gt;</code> 태그에서 이뤄졌는지를 체크해야, <code>preventDefault</code> 함수가 먹혔다. (이유는 잘 모르겠다.)</p>\n<h2>다크 모드 구현 코드</h2>\n<ul>\n<li>./_layouts/base.pug</li>\n</ul>\n<pre><code class=\"language-js\"><div class=\"codeline \">$root = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;html&#x27;</span>)</div><div class=\"codeline \">$switch_theme_input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#switch-theme input&#x27;</span>)</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">set_theme</span>(<span class=\"hljs-params\">theme</span>) {</div><div class=\"codeline \">  $root.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">theme</span> = theme</div><div class=\"codeline \">  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">sessionStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>, theme)</div><div class=\"codeline \">}</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-keyword\">let</span> cur_theme = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">sessionStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&#x27;theme&#x27;</span>) || (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">matchMedia</span> &amp;&amp; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class=\"hljs-property\">matches</span>  ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>)</div><div class=\"codeline \"><span class=\"hljs-keyword\">if</span> (cur_theme === <span class=\"hljs-string\">&#x27;dark&#x27;</span>) {</div><div class=\"codeline \">  $switch_theme_input.<span class=\"hljs-property\">checked</span> = <span class=\"hljs-literal\">true</span></div><div class=\"codeline \">  <span class=\"hljs-title function_\">set_theme</span>(<span class=\"hljs-string\">&#x27;dark&#x27;</span>)</div><div class=\"codeline \">}</div><div class=\"codeline \">$switch_theme_input.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) {</div><div class=\"codeline \">  <span class=\"hljs-title function_\">set_theme</span>((e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">checked</span>) ? <span class=\"hljs-string\">&#x27;dark&#x27;</span> : <span class=\"hljs-string\">&#x27;light&#x27;</span>)</div><div class=\"codeline \">}</div></code></pre>\n<p>먼저 <code>cur_theme</code> 변수를 통해, 사용자가 임의로 선택한 테마를 먼저 가져오고, 없다면 시스템의 테마를 가져온다.</p>\n<p>id 가 <code>switch-theme</code> 인 태그 안에 있는 <code>&lt;input&gt;</code> 태그를 클릭할 때마다 <code>set_theme</code> 함수를 거쳐 테마가 전환되도록 하였다. 선택한 테마는 최상위 <code>&lt;html&gt;</code> 태그에 <code>data-theme</code> 어트리뷰트에 반영된다.</p>\n<p>아래와 같이 변수를 사용하여 css 설정을 하면, 테마에 따른 색상 적용도 편리하게 할 수 있다.</p>\n<ul>\n<li>css</li>\n</ul>\n<pre><code class=\"language-css\"><div class=\"codeline \"><span class=\"hljs-selector-pseudo\">:root</span> {</div><div class=\"codeline \">  <span class=\"hljs-attr\">--fg</span>: <span class=\"hljs-number\">#000</span>; <span class=\"hljs-attr\">--bg</span>: <span class=\"hljs-number\">#fff</span>;</div><div class=\"codeline \">}</div><div class=\"codeline \"><span class=\"hljs-selector-pseudo\">:root</span><span class=\"hljs-selector-attr\">[data-theme=<span class=\"hljs-string\">&quot;dark&quot;</span>]</span> {</div><div class=\"codeline \">  <span class=\"hljs-attr\">--fg</span>: <span class=\"hljs-number\">#fff</span>; <span class=\"hljs-attr\">--bg</span>: <span class=\"hljs-number\">#000</span>;</div><div class=\"codeline \">}</div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-comment\">/* ... */</span></div><div class=\"codeline \"> </div><div class=\"codeline \"><span class=\"hljs-selector-tag\">body</span> {</div><div class=\"codeline \">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--fg); <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">var</span>(--bg);</div><div class=\"codeline \">}</div></code></pre>\n<p>테마에 따라 색상을 조정하고 싶으면 <code>:root</code> 안의 내용만 수정하면 된다.</p>\n<h2>Atomic CSS 사용</h2>\n<p><a href=\"https://tailwindcss.com/\">TailwindCSS</a> 와 같은 Atomic CSS 를 적용해보기로 했다.</p>\n<p>html 파일이 너저분해진다는 단점이 있지만, html 구조를 짤 때마다 class 이름 붙여야하고, html 파일과 css 파일을 왔다갔다하면서 코딩할 필요가 없다는 것이 너무 큰 장점이었다.</p>\n<p>어떤 프레임워크를 쓸까 고민하다가 CSS 언어를 그대로 사용하는 (따라서 별도의 언어를 배울 필요가 없는) <a href=\"https://stylifycss.com/\">StylifyCSS</a> 를 사용하였다.</p>\n<h2>Github Actions 이용하여 자동 빌드</h2>\n<p>블로그가 배포될 레포지토리의 <code>main</code> 브랜치에는 마크다운을, <code>gh-pages</code> 브랜치에는 빌드와 관련된 코드를 두었다. 그리고 Github Pages 설정에서 <code>gh-pages</code> 브랜치의 <code>docs</code> 디렉토리 내용대로 배포되도록 했다.</p>\n<p><code>main</code> 브랜치에 아래와 같은 Github Actions 를 설정하여, <code>main</code> 브랜치에 뭔가의 내용이 푸시가 되면, 빌드가 되도록 하였다.</p>\n<ul>\n<li>./.github/workflows/deploy_pages.yml</li>\n</ul>\n<pre><code class=\"language-yaml\"><div class=\"codeline \"><span class=\"hljs-attr\">ame:</span> <span class=\"hljs-string\">Tezyns</span> <span class=\"hljs-string\">Deployment</span> <span class=\"hljs-string\">Pages</span></div><div class=\"codeline \"><span class=\"hljs-attr\">on:</span></div><div class=\"codeline \">  <span class=\"hljs-attr\">push:</span></div><div class=\"codeline \">    <span class=\"hljs-attr\">branches:</span> [<span class=\"hljs-string\">&quot;main&quot;</span>]</div><div class=\"codeline \"><span class=\"hljs-attr\">permissions:</span></div><div class=\"codeline \">  <span class=\"hljs-attr\">contents:</span> <span class=\"hljs-string\">write</span></div><div class=\"codeline \">  <span class=\"hljs-attr\">pages:</span> <span class=\"hljs-string\">write</span></div><div class=\"codeline \">  <span class=\"hljs-attr\">id-token:</span> <span class=\"hljs-string\">write</span></div><div class=\"codeline \"><span class=\"hljs-attr\">jobs:</span></div><div class=\"codeline \">  <span class=\"hljs-attr\">build:</span></div><div class=\"codeline \">    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span></div><div class=\"codeline \">    <span class=\"hljs-attr\">steps:</span></div><div class=\"codeline \">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">checkout</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-string\">library</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">main</span> <span class=\"hljs-string\">branch</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v4</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">with:</span></div><div class=\"codeline \">          <span class=\"hljs-attr\">ref:</span> <span class=\"hljs-string\">gh-pages</span></div><div class=\"codeline \">          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">&#x27;.&#x27;</span></div><div class=\"codeline \">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">delete</span> <span class=\"hljs-string\">old</span> <span class=\"hljs-string\">pages</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">rm</span> <span class=\"hljs-string\">-rf</span> <span class=\"hljs-string\">_pages</span></div><div class=\"codeline \">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">checkout</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-string\">library</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">main</span> <span class=\"hljs-string\">branch</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v4</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">with:</span></div><div class=\"codeline \">          <span class=\"hljs-attr\">ref:</span> <span class=\"hljs-string\">main</span></div><div class=\"codeline \">          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">&#x27;./_pages&#x27;</span></div><div class=\"codeline \">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v4</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">with:</span></div><div class=\"codeline \">          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-number\">18</span></div><div class=\"codeline \">          <span class=\"hljs-attr\">cache:</span> <span class=\"hljs-string\">npm</span></div><div class=\"codeline \">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">ci</span></div><div class=\"codeline \">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">node</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-string\">pages</span></div><div class=\"codeline \">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Check</span> <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">there</span> <span class=\"hljs-string\">are</span> <span class=\"hljs-string\">any</span> <span class=\"hljs-string\">changes</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">verify_diff</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">git</span> <span class=\"hljs-string\">diff</span> <span class=\"hljs-string\">--quiet</span> <span class=\"hljs-string\">.</span> <span class=\"hljs-string\">||</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;changed=true&quot;</span> <span class=\"hljs-string\">&gt;&gt;</span> <span class=\"hljs-string\">$GITHUB_OUTPUT</span></div><div class=\"codeline \">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Update</span> <span class=\"hljs-string\">Repo</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">if:</span> <span class=\"hljs-string\">steps.verify_diff.outputs.changed</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-string\">&#x27;true&#x27;</span></div><div class=\"codeline \">        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</div><div class=\"codeline \">          git config --global user.name &quot;tezyns&quot;</div><div class=\"codeline \">          git config --global user.email &quot;tezyns@outlook.com&quot;</div><div class=\"codeline \">          git add .</div><div class=\"codeline \">          git commit -m &quot;deployment&quot;</div><div class=\"codeline \">          git push</span></div></code></pre>\n<p>Github Actions 는 워낙 많이 사용되기에 구글링에서 조금만 검색해도 원하는 기능을 구현하려면 어떻게 코딩해야하는지 쉽게 찾을 수 있었다.</p>\n</div>"}
